resource "aws_cloudfront_origin_access_control" "" {
    name                              =
    description                       =
    origin_access_control_origin_type =
    signing_behavior                  =
    signing_protocol                  =
}

resource "aws_cloudfront_distribution" "" {
    enabled =
    is_ipv6_enabled =
    default_root_object =
    aliases =
    
    origin {
        domain_name =
        origin_id =
        origin_access_control_id =
    }

    default_cache_behavior {
        allowed_methods = ["GET", "HEAD"]
        cached_methods = ["GET", "HEAD"]
        # Using AWS Managed-CachingOptimized cache policy
        cache_policy_id = "658327ea-f89d-4fab-a63d-7e88639e58f6"
        target_origin_id =
        viewer_protocol_policy =
    } 

    restrictions {
        geo_restriction {
            restriction_type = "none"
        }
    }

    viewer_certificate {
        acm_certificate_arn =
        ssl_support_method = "sni-only"
        minimum_protocol_version = "TLSv1.2_2021"
    }
}

resource "aws_s3_bucket_policy" "" {
  bucket =

  policy = jsonencode({
    Version = "2008-10-17"
    Id      = "PolicyForCloudFrontPrivateContent"
    Statement = [
      {
        Sid       = "AllowCloudFrontServicePrincipal"
        Effect    = "Allow"
        Principal = {
          Service = "cloudfront.amazonaws.com"
        }
        Action   = "s3:GetObject"
        Resource = "arn:aws:s3:::${}/*"
        Condition = {
          StringEquals = {
            "AWS:SourceArn" =
          }
        }
      }
    ]
  })
}

resource "aws_route53_record" "" {
    zone_id =
    name    =
    type    =

    alias {
        name                   =
        zone_id                =
        evaluate_target_health =
    }
}
